name: Deploy to eu-west-1

on:
 push:
    branches: [ "main" ]
 pull_request:
    branches: [ "main" ]

jobs:
 build-test-and-publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Create a template .runtimeconfig.json file if it doesn't exist
    - name: Create .runtimeconfig.json template
      run: |
        echo '{
          "runtimeOptions": {
            "tfm": "net5.0",
            "framework": {
              "name": "Microsoft.AspNetCore.App",
              "version": "5.0.0"
            }
          }
        }' > .runtimeconfig.json

    # Restore dependencies, build, and publish for each project
    - name: Restore dependencies, build, and publish for API project
      run: |
        dotnet restore Twit.WebAPI/Twit.WebAPI.csproj
        dotnet build Twit.WebAPI/Twit.WebAPI.csproj --no-restore --configuration Release
        dotnet publish Twit.WebAPI/Twit.WebAPI.csproj --no-build --configuration Release --output ./publish/Twit.WebAPI
        cp .runtimeconfig.json ./publish/Twit.WebAPI/

    - name: Restore dependencies, build, and publish for Core project
      run: |
        dotnet restore Twit.Core/Twit.Core.csproj
        dotnet build Twit.Core/Twit.Core.csproj --no-restore --configuration Release
        dotnet publish Twit.Core/Twit.Core.csproj --no-build --configuration Release --output ./publish/Twit.Core
        cp .runtimeconfig.json ./publish/Twit.Core/

    - name: Restore dependencies, build, and publish for Infrastructure project
      run: |
        dotnet restore Twit.Infrastructure/Twit.Infrastructure.csproj
        dotnet build Twit.Infrastructure/Twit.Infrastructure.csproj --no-restore --configuration Release
        dotnet publish Twit.Infrastructure/Twit.Infrastructure.csproj --no-build --configuration Release --output ./publish/Twit.Infrastructure
        cp .runtimeconfig.json ./publish/Twit.Infrastructure/

    - name: Restore dependencies, build, and publish for Test project
      run: |
        dotnet restore Twit.Test/Twit.Test.csproj
        dotnet build Twit.Test/Twit.Test.csproj --no-restore --configuration Release
        dotnet publish Twit.Test/Twit.Test.csproj --no-build --configuration Release --output ./publish/Twit.Test
        cp .runtimeconfig.json ./publish/Twit.Test/

    # Display the content of the publish directory for verification
    - name: Check Publish Output
      run: ls -R ./publish

    # Create a ZIP file of the published artifacts
    - name: Create ZIP of published artifacts
      run: |
        cd publish
        zip -r ../deployment-package.zip .

    # Deploy to AWS Elastic Beanstalk
    - name: Deploy to EB
      uses: einaregilsson/beanstalk-deploy@v22
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: twit
        environment_name: twit-env
        version_label: ${{ github.run_number }}
        region: eu-west-1
        deployment_package: deployment-package.zip
